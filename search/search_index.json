{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Liri Developers Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Liri uses Qt, a cross-platform framework, to build apps and libraries.</p> <p>The IDE of choice is QtCreator a cross-platform IDE dedicated to development with Qt.</p> <p>All projects use the popular CMake build system.</p> <p>Source code is managed with git and we use the git flow workflow.</p> <p>This means, in a nutshell, that the latest released code is in the <code>master</code> branch while development happens in the <code>develop</code> branch.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Liri requires a recent version of Qt therefore we recommend to develop on Arch Linux, because it is a great distro for developers and the software is always up to date.</p> <p>Some distributions like Ubuntu have very old Qt copies. If you cannot switch to Arch Linux, please consider installing the binaries provided by The Qt Company.</p> <p>Download the online installer and install both Qt and QtCreator. However keep in mind that the binaries provided by The Qt Company do not have QtWayland, this means that you will not be able to develop Liri Shell.</p> <p>Head over to the Contributor Guide for more information on how to set everything up.</p>"},{"location":"#getting-in-touch","title":"Getting in touch","text":"<p>Connect with us on Twitter, Facebook, Reddit, Mastodon, Chat via Matrix.org or IRC to keep updated.</p>"},{"location":"about/philosophy/","title":"The Liri environment","text":"<p>Liri aims to offer an excellent desktop experience.</p> <p>Instead of forcing the user to know every detail of their computer, we expect them to turn it on, sit down and simply use it. We are able to achieve this through concise design methodology and the fact that all the applications built for Liri are designed from top to bottom to work together, offer consistency and stability, and deliver the features users want.</p> <p>To develop an excellent application, you will need to understand the environment and why our users love it. With this understanding, have no doubt that you will be able to establish an application that takes adventures of core platform features and an interface that integrates seamlessly into the desktop experience.</p>"},{"location":"about/philosophy/#a-distraction-free-content-focused-desktop","title":"A distraction free, content focused desktop","text":"<p>Liri was created around the core belief that the majority of people use computers to create and experience digital content that they care about and throughout their daily activities.</p> <p>On a Liri device, the user is free to focus on their content and productivity because Liri performs many of the typical backend application management tasks that users are generally expected to handle.</p>"},{"location":"about/philosophy/#avoiding-manual-configuration","title":"Avoiding manual configuration","text":"<p>Liri is able to take much of the burden of adjusting and controlling the minor details of the system for the majority of users. This is achieved by promoting minimal configuration throughout the system and applications. </p> <p>Providing settings is usually an easy way out of making design decisions about an app\u2019s behavior. The same as feature bloat, increased user settings mean more code, more bugs, more testing, more documentation, and more overall complexity for the user.</p>"},{"location":"about/philosophy/#creating-an-out-of-the-box-experience","title":"Creating An \"Out of the Box\" Experience","text":"<p>Always design with sane defaults in focus.</p> <p>Liri applications put a strong emphasis on the out of the box experience for the users.</p> <p>It is safe to assume that if your app requires configuration before a user can be comfortable using it, the user may not take the time to configure it at all and simply use another app in place.</p>"},{"location":"about/philosophy/#ask-the-os-not-the-user","title":"Ask the OS, Not the User","text":"<p>Get as much information automatically as possible. In place of asking the user for his or her name and location, ask the system for this information. This directly reduces the amount of tasks a user has to complete before they are able to have any amount of productivity, it also gives an extra layer of intelligence and integration to your app.</p>"},{"location":"about/philosophy/#is-it-necessary-to-the-user-experience","title":"Is It Necessary To The User Experience?","text":"<p>Always contemplate on if the configuration option you are adding is really necessary or vital to the user. Avoid asking users to make engineering or design related decisions. Configuration options should be strictly regulated and assigned to either the initial setup of the app or personal preference.</p>"},{"location":"about/philosophy/#contextual-display","title":"Contextual Display","text":"<p>Keep things in context. Actively make design decisions that allow you to display preferences in context with the objects they affect, rather than tucked away in a configuration dialog.</p> <p>If your app requires configuration upon initial use, or before it can be used (like a mail client), present this configuration inside the main app window much like a Welcome Screen. Once again, be mindful to only present configuration options when necessary.</p>"},{"location":"about/philosophy/#full-screen-helps-users-focus","title":"Full-Screen Helps Users Focus","text":"<p>At times it can make sense for an app to offer an immersive, full-screen experience to help users focus on tasks and avoid distractions from the desktop or background applications.</p> <p>Liri makes extensive use of this and compliments full-screen applications organically with ease.</p> <p>[INSERT FULL-SCREEN SCREENSHOT]</p> <p>Insert detailed information about the full-screen native functionality of applications.</p>"},{"location":"about/philosophy/#how-applications-display-on-taskbar","title":"How Applications Display On Taskbar","text":"<p>Relevant text.</p>"},{"location":"about/philosophy/#customizing-user-experience-via-system-preferences","title":"Customizing User Experience Via System Preferences","text":"<p>Relevant text.</p>"},{"location":"about/philosophy/#user-help-and-documentation-is-unobtrusively-available","title":"User Help And Documentation Is Unobtrusively Available","text":"<p>Relevant text.</p>"},{"location":"about/philosophy/#multiple-users-on-a-single-system","title":"Multiple Users On A Single System","text":"<p>Relevant text.</p>"},{"location":"about/philosophy/#accessibility-and-internationalization","title":"Accessibility and Internationalization","text":"<p>Relevant text.</p>"},{"location":"about/philosophy/#a-focus-on-typography","title":"A Focus On Typography","text":"<p>Relevant text.</p>"},{"location":"about/project-management/","title":"Project management","text":"<ul> <li>GitHub issues on each repository for detailed issue tracking</li> <li>GitHub issues on the lirios repository for general issue tracking and tasks</li> <li>ZenHub for enhanced issue tracking with Scrum/Kanban approach</li> <li>Slack for team communication</li> <li>Google Groups mailing list</li> <li>Google Docs for big picture collaborative docs</li> </ul>"},{"location":"about/project-management/#decisions-and-conflict-resolution","title":"Decisions and conflict resolution","text":"<ul> <li>Need to find a healthy way to resolve conflicts if we disagree</li> <li>Adapt governance model to the Qt Governance Model</li> <li>Use a contribution agreement that would allow us to relicense under another Free Software License blessed by OSI or FSF without contacting tons of people (I want to avoid this https://github.com/papyros/qml-material/issues/361) We won\u2019t ask for copyright assignment and under no circumstances we\u2019ll be able to make the code proprietary.</li> </ul>"},{"location":"about/project-management/#versioning","title":"Versioning","text":"<ul> <li>Use semantic versioning</li> <li>Liri OS MVP will start at version 0.9.0 since the shell and workspace code comes directly from Hawaii that reached 0.8.0</li> <li>How do we version all the libraries, etc? Do we use the same version for each project and release everything at once?</li> </ul>"},{"location":"contributing/build-sources/","title":"Introduction","text":"<p>In this guide we deal with building the Liri projects from git. Check in the Contributor Guide how to get sources from the git repositories.</p>"},{"location":"contributing/build-sources/#dependencies","title":"Dependencies","text":"<p>We need:</p> <ul> <li>Git (&gt;= 1.6.x)</li> <li>A working C++ compiler</li> <li>Qt (&gt;= 6.6)</li> <li>qtbase</li> <li>qtdoc</li> <li>qtdeclarative</li> <li>qtgraphicaleffects</li> <li>qtquickcontrols2</li> <li>qtsvg</li> <li>qtwayland</li> <li>qttools</li> <li>qtmultimedia</li> <li>qtwebengine</li> <li>cmake (&gt;= 3.10)</li> </ul>"},{"location":"contributing/build-sources/#install-dependencies","title":"Install dependencies","text":"<p>Build essentials:</p> Distro Command Debian <code>sudo apt-get install -y build-essential clang git</code> Arch Linux <code>sudo pacman -Syu base-devel git</code> Fedora <code>sudo dnf install -y clang git</code> OpenSUSE <code>sudo zypper install clang git-core</code> <p>Qt and cmake:</p> Distro Command Debian <code>sudo apt-get install -y qt6-default qtquickcontrols2-6-dev qml-module-qtwayland-compositor qtwayland6-dev-tools qtwebengine6-dev-tools qtwebengine6-private-dev qtwebengine6-dev qtmultimedia6-dev qtsvg6 qt6-doc qttools6-dev cmake ninja</code> Arch Linux <code>sudo pacman -Syu qt6-quickcontrols2 qt6-wayland qt6-webengine qt6-multimedia qt6-svg qt6-doc qt6-tools qt6-5compat cmake ninja</code> Fedora <code>sudo dnf install -y qt6-qtbase-static qt6-qtbase-private-devel qt6-qtquickcontrols2-devel qt6-qtwayland-devel qt6-qtmultimedia-devel qt6-qtwebengine-devel qt6-qtsvg-devel qt6-doc-devel qt6-qttools-devel qt6-qt5compat-devel cmake ninja</code> OpenSUSE <code>sudo zypper install libqt6-qtquickcontrols2 libqt6-qtquickwayland-devel libqt6-qtwayland-private-headers-devel libqt6-qtwebengine-devel libqt6-qtmultimedia-devel libqt6-qtsvg-devel libqt6-qtdoc-devel libqt6-qttools-devel cmake ninja</code> <p>Other dependencies:</p> Distro Command Debian <code>sudo apt-get install -y extra-cmake-modules libwayland-dev wayland-protocols libpam0g-dev libpolkit-qt6-1-dev libpolkit-gobject-1-dev libkf6solid-dev libsystemd-dev libdrm-dev libgbm-dev libinput-dev libxcb-cursor-dev libxcursor-dev libpulse-dev libkf6networkmanagerqt-dev libmodemmanagerqt-dev libglib2.0-dev dconf-service dconf-cli dconf-gsettings-backend dconf-tools libpipewire-0.2-dev gstreamer1.0-pipewire libxkbcommon-dev libqtgstreamer-dev libflatpak-dev libappstreamqt-dev</code> Arch Linux <code>sudo pacman -Syu extra-cmake-modules wayland pam polkit-qt6 solid libdrm libinput xcb-util-cursor pipewire-pulse networkmanager-qt modemmanager-qt glib2 dconf pipewire libxkbcommon flatpak appstream-qt libxcvt libdisplay-info</code> Fedora <code>sudo dnf install -y extra-cmake-modules wayland-devel wayland-protocols-devel pam-devel polkit-devel polkit-qt6-1-devel kf6-solid-devel systemd-devel libdrm-devel mesa-libgbm-devel libinput-devel xcb-util-cursor-devel libXcursor-devel pulseaudio-libs-devel NetworkManager-libnm-devel ModemManager-glib-devel kf6-networkmanager-qt-devel kf6-modemmanager-qt-devel glib2-devel dconf pipewire-devel pipewire-utils libxkbcommon-devel flatpak-devel appstream-qt-devel gstreamer1-devel libxcvt-devel libdisplay-info-devel</code> OpenSUSE <code>sudo zypper install extra-cmake-modules wayland-devel wayland-protocols pam-devel polkit-devel libpolkit-qt6-1-devel solid-devel systemd-devel libdrm-devel libgbm-devel libinput-devel xcb-util-cursor-devel libXcursor-devel pulseaudio-libs-devel libKF6NetworkManagerQt-devel libKF6ModemManagerQt-devel glib-devel dconf gsettings-backend-dconf pipewire-devel pipewire-tools gstreamer-plugin-pipewire libxkbcommon-devel flatpak-devel libAppstreamQt-devel</code> <p>Marginal dependencies (used on unit tests, etc...):</p> Distro Command Debian <code>sudo apt-get install -y umockdev-dev</code> Arch Linux <code>sudo pacman -Syu umockdev</code> Fedora <code>sudo dnf install -y umockdev-devel</code> OpenSUSE <code>sudo zypper install umockdev-devel</code>"},{"location":"contributing/build-sources/#build","title":"Build","text":"<p>Developers should open <code>CMakeLists.txt</code> with QtCreator and build there, that is way easier.</p> <p>However if you know bash-fu it's possibile to build from sources.</p> <p>We assume you have a terminal open in the sources root directory, where there's <code>CMakeLists.txt</code>.</p> <p>Build:</p> <pre><code>mkdir .build\ncd .build\ncmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install-root ..\nmake\nmake install\n</code></pre>"},{"location":"contributing/upstream-issues/","title":"Upstream Issues","text":"<p>This is a living document that lists issues from upstream projects that introduce problems to Liri OS and apps and whose resolution is not a Liri responsability.</p>"},{"location":"contributing/upstream-issues/#wayland","title":"Wayland","text":"<p>Wayland needs to address some issues before claiming feature parity with Xorg.</p> <ul> <li>A client cannot change the keymap. This would be required to let Calamares change the keyboard layout, otherwise the user won't be able to test the keyboard layout during the installation.</li> <li>A compositor cannot change the cursor theme on all clients. We can craft a solution only for Qt clients, but it won't work for other toolkits. This means that changing the cursor theme from Settings requires to restart the desktop.</li> </ul>"},{"location":"contributing/upstream-issues/#xwayland","title":"XWayland","text":"<p>Clients are blurry on HiDPI. See this IRC conversation:</p> <pre><code>&lt;plfiorini&gt; xwayland clients seem blurry on hidpi, compared to their wayland counterpart. doesn't seem to be a toolkit issue since this happens with both gtk and qt. is this a known issue?\n&lt;SardemFF7&gt; plfiorini: short answer: yes, nothing can be done about it\n&lt;plfiorini&gt; SardemFF7, so nothing i could fix with the compositor author hat on?\n&lt;SardemFF7&gt; the long answer is that you could, maybe, fix some of the clients by providing more information, or by lying, but that may break other clients, so you\u2019d probably need special extra support in X11 toolkits/apps to make it work, and they probably have Wayland support anyway\n&lt;fredrikh&gt; a different scaling filter could help\n&lt;SardemFF7&gt; that one is up to the compositor\n&lt;SardemFF7&gt; but I don\u2019t think it\u2019d fix everything magically\n&lt;fredrikh&gt; nope\n&lt;fredrikh&gt; still, bilnear is probably the worst magnification filter if you don't want to things to look blurry\n&lt;plfiorini&gt; thanks for your answer\n&lt;SardemFF7&gt; plfiorini: there is a thread on the ML about that, btw\n&lt;SardemFF7&gt; plfiorini: https://lists.freedesktop.org/archives/wayland-devel/2017-September/034957.html\n</code></pre>"},{"location":"contributing/upstream-issues/#qtdeclarative","title":"QtDeclarative","text":"<ul> <li>TextEdit doesn't correctly update formats set by QSyntaxHighlighter: QTBUG-58092</li> <li>ListView with transitions does not always position delegates properly: QTBUG-62148</li> </ul>"},{"location":"contributing/upstream-issues/#qtwayland","title":"QtWayland","text":"<p>Qt 5.8.0 introduces QtWayland as an official module, finally the QtWaylandCompositor framework is considered stable.  However it still lack a few features or has bugs that need to be fixed:</p> <ul> <li>Partial subsurface support: missing raise, lower and synchronization.</li> <li>D&amp;D works only on one output: QTBUG-55584</li> <li>Dropdown window closes on key press: QTBUG-55403</li> <li>[Wayland] Modifiers not working in wheelEvent: QTBUG-61488</li> </ul>"},{"location":"contributing/upstream-issues/#qtquick-controls-2","title":"QtQuick Controls 2","text":"<ul> <li>Roboto doesn't support all languages, should fallback to Noto: QTBUG-59579</li> <li>Dialog should respond to Enter key: QTBUG-60361</li> <li>MenuItem is not triggered by the \"Enter\" key: QTBUG-67275</li> </ul>"},{"location":"contributing/upstream-issues/#qtwebengine","title":"QtWebEngine","text":"<ul> <li>Crashes on Wayland, means that Liri Browser doesn't work on Wayland: QTBUG-55384</li> </ul>"},{"location":"contributing/upstream-issues/#solid","title":"Solid","text":"<ul> <li>udisks2 backend makes blocking dbus calls: 380990</li> </ul>"},{"location":"contributing/upstream-issues/#gtk","title":"Gtk+","text":"<p>While Liri OS is focused on Qt applications, we still want compatibility with Gtk+ applications.</p> <ul> <li>Bad app_id for Gtk+ apps: 769641</li> </ul>"},{"location":"contributing/upstream-issues/#snap-online-services","title":"Snap Online Services","text":"<ul> <li>build.snapcraft.io doesn't respect publishing rights for shared snaps: #799</li> <li>Proxy token lifetime for launchpad-buildd is limited 1709678</li> </ul>"},{"location":"contributing/upstream-issues/#snapcraft","title":"Snapcraft","text":"<ul> <li><code>qmake</code> plugin doesn't support choosing a custom Qt version: 1670146</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/","title":"C++ Coding Conventions","text":"<p>This is an overview of the high-level coding conventions we use when writing Qt code. See C++ Coding Style for the lower-level conventions.</p> <p>For QML, see QML Coding Conventions.</p>"},{"location":"contributing/coding-conventions/cpp-conventions/#c-features","title":"C++ features","text":"<ul> <li>Don't use exceptions</li> <li>Don't use rtti (Run-Time Type Information; that is, the <code>typeinfo</code> struct, the <code>dynamic_cast</code> or the <code>typeid</code> operators, including throwing exceptions)</li> <li>Use templates wisely, not just because you can.</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#conventions-in-c-source-code","title":"Conventions in C++ source code","text":"<ul> <li>All code is ascii only (7-bit characters only, run <code>man ascii</code> if unsure)</li> <li>Rationale: We have too many locales inhouse and an unhealthy mix of UTF-8 and latin1 systems. Usually, characters &gt; 127 can be broken without you even knowing by clicking SAVE in your favourite editor.</li> <li>For strings: Use <code>\\nnn</code> (where <code>nnn</code> is the octal representation of whatever character encoding you want your string in) or <code>\\xnn</code> (where <code>nn</code> is hexadecimal). Example: <code>QString s = QString::fromUtf8(\"13\\005\");</code></li> <li>For umlauts in documentation, or other non-ASCII characters, either use qdoc's command or use the relevant macro; e.g. <code>\\uuml</code> for \u00fc.</li> <li>Every QObject subclass must have a <code>Q_OBJECT</code> macro, even if it doesn't have signals or slots, otherwise <code>qobject_cast</code> will fail.</li> <li>Normalize the arguments for signals + slots (see <code>QMetaObject::normalizedSignature</code>) inside connect statements to get faster signal/slot lookups. You can use <code>qtrepotools/util/normalize</code> to normalize existing code.</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#including-headers","title":"Including headers","text":"<ul> <li>In public header files, always use this form to include Qt headers: <code>#include &lt;QtCore/qwhatever.h&gt;</code>. The library prefix is necessary for Mac OS X frameworks and is very convenient for non-qmake projects.</li> <li>In source files, include specialized headers first, then generic headers. Separate the categories with empty lines.</li> </ul> <pre><code>#include &lt;qstring.h&gt; // Qt class\n#include &lt;new&gt; // STL stuff\n#include &lt;limits.h&gt; // system stuff\n</code></pre> <ul> <li>If you need to include <code>qplatformdefs.h</code>, always include it as the '''first''' header file.</li> <li>If you need to include private headers, be careful. Use the following syntax, irrespective of which module or directory whatever_p.h is in.</li> </ul> <pre><code>#include &lt;private/whatever_p.h&gt;\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-conventions/#include-guards","title":"Include guards","text":"<p>Never use <code>#pragma once</code> because it's not part of the C++ standard, it's not always supported and it's subject to double inclusion if any headers are copied somehere in the build process (which we does).</p> <p>Use include guards instead like these:</p> <pre><code>#ifndef SOMEFILENAME_H\n#define SOMEFILENAME_H\n\n// contents\n\n#endif // SOMEFILENAME_H\n</code></pre> <p>See the following threads from the Qt mailing list:</p> <ul> <li>https://lists.qt-project.org/pipermail/development/2018-January/031966.html</li> <li>https://lists.qt-project.org/pipermail/development/2018-October/033726.html</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#casting","title":"Casting","text":"<ul> <li>Avoid C casts, prefer C++ casts (<code>static_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>)</li> <li>Rationale: Both reinterpret_cast and C-style casts are dangerous, but at least reinterpret_cast won't remove the const modifier</li> <li>Don't use <code>dynamic_cast</code>, use <code>qobject_cast</code> for QObjects or refactor your design, for example by introducing a type() method (see QListWidgetItem)</li> <li>Use the constructor to cast simple types: <code>int(myFloat)</code> instead of <code>(int)myFloat</code></li> <li>Rationale: When refactoring code, the compiler will instantly let you know if the cast would become dangerous.</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#compilerplatform-specific-issues","title":"Compiler/Platform specific issues","text":"<ul> <li>Be extremely careful when using the questionmark operator. If the returned types aren't identical, some compilers generate code that crashes at runtime (you won't even get a compiler warning).</li> </ul> <pre><code>QString s;\nreturn condition ? s : \"nothing\"; // crash at runtime - QString vs. const char *\n</code></pre> <ul> <li>Be extremely careful about alignment.</li> <li>Whenever a pointer is cast such that the required alignment of the target is increased, the resulting code might crash at runtime on some architectures. For example, if a <code>const char *</code> is cast to an <code>const int *</code>, it'll crash on machines where integers have to be aligned at two- or four-byte boundaries.</li> <li>Use a union to force the compiler to align variables correctly. In the example below, you can be sure that all instances of <code>AlignHelper</code> are aligned at integer-boundaries.</li> </ul> <pre><code>union AlignHelper {\n    char c;\n    int i;\n};\n</code></pre> <ul> <li>Anything that has a constructor or needs to run code to be initialized cannot be used as global object in library code, since it is undefined when that constructor/code will be run (on first usage, on library load, before main() or not at all). Even if the execution time of the initializer is defined for shared libraries, you'll get into trouble when moving that code in a plugin or if the library is compiled statically:</li> </ul> <pre><code>// global scope\nstatic const QString x; // Wrong - default constructor needs to be run to initialize x\nstatic const QString y = \"Hello\"; // Wrong - constructor that takes a const char * has to be run\nQString z; // super wrong\nstatic const int i = foo(); // wrong - call time of foo() undefined, might not be called at all\n</code></pre> <p>Things you can do:</p> <pre><code>// global scope\nstatic const char x[] = \"someText\"; // Works - no constructor must be run, x set at compile time\nstatic int y = 7; // Works - y will be set at compile time\nstatic MyStruct s = {1, 2, 3}; // Works - will be initialized statically, no code being run\nstatic QString *ptr = 0; // Pointers to objects are ok - no code needed to be run to initialize ptr\n</code></pre> <p>Use <code>Q_GLOBAL_STATIC</code> to create static global objects instead:</p> <pre><code>Q_GLOBAL_STATIC(QString, s)\n\nvoid foo()\n{\n    s()-&gt;append(\"moo\");\n}\n</code></pre> <p>Note: Static objects in a scope are no problem, the constructor will be run the first time the scope is entered. The code is not reentrant, though.</p> <ul> <li>A <code>char</code> is signed or unsigned dependent on the architecture. Use <code>signed char</code> or <code>unsigned char</code> if you explicitely want a signed/unsigned char. The condition in the following code is always true on platforms where the default char is unsigned.</li> </ul> <pre><code>char c; // c can't be negative if it is unsigned\n\nif (c &gt; 0) { \u2026 } // WRONG - condition is always true on platforms where the default is unsigned\n</code></pre> <ul> <li>Avoid 64-bit enum values.</li> <li>The aapcs embedded ABI hard codes all enum values to a 32-bit integer.</li> <li>Microsoft compilers don't support 64-bit enum values. (confirmed with Microsoft \u00ae C/C++ Optimizing Compiler Version 15.00.30729.01 for x64)</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#aesthetics","title":"Aesthetics","text":"<ul> <li>Prefer enums to define constants over <code>static const int</code> or defines.</li> <li>enum values will be replaced by the compiler at compile time, resulting in faster code</li> <li>defines are not namespace safe (and look ugly)</li> <li>Prefer verbose argument names in headers.</li> <li>Most IDEs will show the argument names in their completion-box.</li> <li>It will look better in the documentation</li> <li>Bad style: <code>doSomething(QRegion rgn, QPoint p)</code> - use <code>doSomething(QRegion clientRegion, QPoint gravitySource)</code> instead</li> <li>When reimplementing a virtual method, do not put the <code>virtual</code> keyword in the header file. On Qt5, annotate them with the Q_DECL_OVERRIDE macro after the function declaration, just before the <code>;</code> (or the <code>{</code>).</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#things-to-avoid","title":"Things to avoid","text":"<ul> <li>Do not inherit from template/tool classes</li> <li>The destructors are not virtual, leading to potential memory leaks</li> <li>The symbols are not exported (and mostly inline), leading to interesting symbol clashes.</li> <li>Example: Library A has <code>class Q_EXPORT X: public QList&lt;QVariant&gt; {};</code> and library B has <code>class Q_EXPORT Y: public QList&lt;QVariant&gt; {};</code> Suddenly, QList's symbols are exported from two libraries - /clash/. <li>Don't mix const and non-const iterators. This will silently crash on broken compilers.</li> <pre><code>for (Container::const_iterator it = c.begin(); it != c.end(); ++it) // W R O N G\nfor (Container::const_iterator it = c.cbegin(); it != c.cend(); ++it) // Right\n</code></pre> <ul> <li>Q[Core]Application is a singleton class. There can only be one instance at a time. However, that instance can be destroyed and a new one can be created, which is likely in an ActiveQt or browser plugin. Code like this will easily break:</li> </ul> <pre><code>static QObject *obj = 0;\nif (!obj)\n    obj = new QObject(QCoreApplication::instance());\n</code></pre> <p>If the <code>QCoreApplication</code> application is destroyed, <code>obj</code> will be a dangling pointer. Use <code>Q_GLOBAL_STATIC</code> for static global objects or <code>qAddPostRoutine</code> to clean up.</p> <ul> <li>Avoid the use of anonymous namespaces in favor of the static keyword if possible. A name localized to the compilation unit with <code>static</code> is guaranteed to have internal linkage. For names declared in anonymous namespaces the C++ standard unfortunately mandates external linkage. (7.1.1/6, or see various discussions about this on the gcc mailing lists)</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#binary-and-source-compatibility","title":"Binary and Source Compatibility","text":"<ul> <li>Definitions:</li> <li>Qt 4.0.0 is a major release, Qt 4.1.0 is a minor release, Qt 4.1.1 is a patch release</li> <li>Backward binary compatibility: Code linked to an earlier version of the library keeps working</li> <li>Forward binary compatibility: Code linked to a newer version of the library works with an older library</li> <li>Source code compatibility: Code compiles without modification</li> <li>Keep backward binary compatibility + backward source code compatibility in minor releases</li> <li>Keep backward and forward binary compatibility + forward and backward source code compatibility in patch releases</li> <li>Don't add/remove any public API (e.g. global functions, public/protected/private methods)</li> <li>Don't reimplement methods (not even inlines, nor protected/private methods)</li> <li>Check [[Binary Compatibility Workarounds]] for ways to keep b/c</li> <li>Info on binary compatibility: https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C++</li> <li>When writing a QWidget subclass, always reimplement event(), even if it's empty. This makes sure that the widget can be fixed without breaking binary compatibility.</li> <li>All exported functions from Qt must start with either 'q' or 'Q'. Use the \"symbols\" autotest to find violations.</li> </ul>"},{"location":"contributing/coding-conventions/cpp-conventions/#operators","title":"Operators","text":"<p>\"The decision between member and non-member\"</p> <p>A binary operator that treats both of its arguments equally should not be a member. Because, in addition to the reasons mentioned in the stack overflow answer, the arguments are not equal when the operator is a member.</p> <p>Example with QLineF which unfortunately has its operator== as a member:</p> <pre><code>QLineF lineF;\nQLine lineN;\n\nif (lineF == lineN) // Ok,  lineN is implicitly converted to QLineF\nif (lineN == lineF) // Error: QLineF cannot be converted implicitly to QLine, and the LHS is a member so no conversion applies\n</code></pre> <p>If the operator== was outside of the class, conversion rules would apply equally for both sides.</p>"},{"location":"contributing/coding-conventions/cpp-conventions/#conventions-for-public-header-files","title":"Conventions for public header files","text":"<p>Our public header files have to survive the strict settings of some of our users. All installed headers have to follow these rules:</p> <ul> <li>No C style casts (<code>-Wold-style-cast</code>)</li> <li>Use static_cast, const_cast or reinterpret_cast</li> <li>for basic types, use the constructor form: int(a) instead of (int)a</li> <li> <p>See chapter \"Casting\" for more info</p> </li> <li> <p>No float comparisons (<code>-Wfloat-equal</code>)</p> </li> <li>Use qFuzzyCompare to compare values with a delta</li> <li> <p>Use qIsNull to check whether a float is binary 0, instead of comparing it to 0.0. </p> </li> <li> <p>Don't hide virtual methods in subclasses (<code>-Woverloaded-virtual</code>)</p> </li> <li> <p>If the baseclass <code>A</code> has a <code>virtual int val()</code> and subclass <code>B</code> an overload with the same name, <code>int val(int x)</code>, <code>A</code>'s <code>val</code> function is hidden. Use the <code>using</code> keyword to make it visible again:</p> </li> </ul> <pre><code>class B: public A\n{\n    using A::val;\n    int val(int x);\n};\n</code></pre> <ul> <li>Don't shadow variables (<code>-Wshadow</code>)</li> <li>avoid things like <code>this-&gt;x = x;</code></li> <li>don't give variables the same name as functions declared in your class</li> <li>Always check whether a preprocessor variable is defined before probing its value (<code>-Wundef</code>)</li> </ul> <pre><code>#if Foo == 0  // W R O N G\n#if defined(Foo) &amp;&amp; (Foo == 0) // Right\n#if Foo - 0 == 0 // Clever, are we? Use the one above instead, for better readability\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-conventions/#conventions-for-c11-usage","title":"Conventions for C++11 usage","text":"<p>Note: This section is not an accepted convention yet. This section serves as baseline for further discussions.</p>"},{"location":"contributing/coding-conventions/cpp-conventions/#lambdas","title":"Lambdas","text":"<p>You can use lambdas with the following restrictions:</p> <ul> <li>You have to explicitly specify the return type, if the lambda contains more than a single expression. Otherwise it does not compile with VS2010.</li> </ul> <pre><code>[]() -&gt; QString {\n    Foo *foo = activeFoo();\n    return foo ? foo-&gt;displayName() : QString();\n});\n</code></pre> <p>NOT</p> <pre><code>[]() {\n    Foo *foo = activeFoo();\n    return foo ? foo-&gt;displayName() : QString();\n});\n</code></pre> <ul> <li>If you use static functions from the class that the lambda is located in, you have to explicitly capture this. Otherwise it does not compile with g++ 4.7 and earlier.</li> </ul> <pre><code>void Foo::something()\n{\n    ...\n    [this]() { Foo::someStaticFunction(); }\n    ...\n}\n</code></pre> <p>NOT</p> <pre><code>void Foo::something()\n{\n    ...\n    []() { Foo::someStaticFunction(); }\n    ...\n}\n</code></pre> <p>Format the lambda according to the following rules:</p> <ul> <li>Always write parentheses for the parameter list, even if the function does not take parameters.</li> </ul> <pre><code>[]() { doSomething(); }\n</code></pre> <p>NOT</p> <pre><code>[] { doSomething(); }\n</code></pre> <ul> <li>Place the capture-list, parameter list, return type, and opening brace on the first line, the body indented on the following lines, and the closing brace on a new line.</li> </ul> <pre><code>[]() -&gt; bool {\n    something();\n    return isSomethingElse();\n}\n</code></pre> <p>NOT</p> <pre><code>[]() -&gt; bool { something();\n    somethingElse(); }\n</code></pre> <ul> <li>Place a closing parenthesis and semicolon of an enclosing function call on the same line as the closing brace of the lambda.</li> </ul> <pre><code>foo([]() {\n    something();\n});\n</code></pre> <ul> <li>If you are using a lambda in an 'if' statement, start the lambda on a new line, to avoid confusion between the opening brace for the lambda and the opening brace for the 'if' statement.</li> </ul> <pre><code>if (anyOf(fooList,\n          [](Foo foo) {\n              return foo.isGreat();\n          }) {\n    return;\n}\n</code></pre> <p>NOT</p> <pre><code>if (anyOf(fooList, [](Foo foo) {\n          return foo.isGreat();\n       }) {\n    return;\n}\n</code></pre> <ul> <li>Optionally, place the lambda completely on one line if it fits.</li> </ul> <pre><code>foo([]() { return true; });\n\nif (foo([]() { return true; })) {\n    ...\n}\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-conventions/#auto-keyword","title":"auto Keyword","text":"<p>Optionally, you can use the auto keyword in the following cases. If in doubt, for example if using auto could make the code less readable, do not use auto. Keep in mind that code is read much more often than written.</p> <ul> <li>When it avoids repetition of a type in the same statement.</li> </ul> <pre><code>auto something = new MyCustomType;\nauto keyEvent = static_cast&lt;QKeyEvent *&gt;(event);\nauto myList = QStringList() &lt;&lt; QLatin1String(\"FooThing\") &lt;&lt; QLatin1String(\"BarThing\");\n</code></pre> <ul> <li>When assigning iterator types.</li> </ul> <pre><code>auto it = myList.const_iterator();\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-style/","title":"C++ Coding Style","text":"<p>This is an overview of the low-level coding conventions we use when writing Qt code. See C++ Coding Conventions for the higher-level conventions.</p> <p>The data has been gathered by mining the Qt sources, discussion forums, email threads and through collaboration of the developers.</p>"},{"location":"contributing/coding-conventions/cpp-style/#indentation","title":"Indentation","text":"<ul> <li>4 spaces are used for indentation</li> <li>Spaces, not tabs!</li> </ul>"},{"location":"contributing/coding-conventions/cpp-style/#declaring-variables","title":"Declaring variables","text":"<ul> <li>Declare each variable on a separate line</li> <li>Avoid short or meaningless names (e.g. \"a\", \"rbarr\", \"nughdeget\")</li> <li>Single character variable names are only okay for counters and temporaries, where the purpose of the variable is obvious</li> <li>Wait when declaring a variable until it is needed</li> </ul> <pre><code> // Wrong\n int a, b;\n char *c, *d;\n\n // Correct\n int height;\n int width;\n char *nameOfThis;\n char *nameOfThat;\n</code></pre> <ul> <li>Variables and functions start with a lower-case letter. Each consecutive word in a variable's name starts with an upper-case letter</li> <li>Avoid abbreviations</li> </ul> <pre><code> // Wrong\n short Cntr;\n char ITEM_DELIM = ' ';\n\n // Correct\n short counter;\n char itemDelimiter = ' ';\n</code></pre> <ul> <li>Classes always start with an upper-case letter. Public classes start with a 'Q' (QRgb) followed by an upper case letter. Public functions most often start with a 'q' (qRgb).</li> <li>Acronyms are camel-cased (e.g. QXmlStreamReader, not QXMLStreamReader).</li> </ul>"},{"location":"contributing/coding-conventions/cpp-style/#whitespace","title":"Whitespace","text":"<ul> <li>Use blank lines to group statements together where suited</li> <li>Always use only one blank line</li> <li>Always use a single space after a keyword and before a curly brace:</li> </ul> <pre><code> // Wrong\n if(foo){\n }\n\n // Correct\n if (foo) {\n }\n</code></pre> <ul> <li>For pointers or references, always use a single space between the type and '' or '&amp;', but no space between the '' or '&amp;' and the variable name:</li> </ul> <pre><code> char *x;\n const QString &amp;myString;\n const char - const y = \"hello\";\n</code></pre> <ul> <li>Surround binary operators with spaces</li> <li>No space after a cast</li> <li>Avoid C-style casts when possible</li> </ul> <pre><code> // Wrong\n char- blockOfMemory = (char- ) malloc(data.size());\n\n // Correct\n char *blockOfMemory = reinterpret_cast&lt;char *&gt;(malloc(data.size()));\n</code></pre> <ul> <li>Do not put multiple statements on one line</li> <li>By extension, use a new line for the body of a control flow statement:</li> </ul> <pre><code> // Wrong\n if (foo) bar();\n\n // Correct\n if (foo)\n     bar();\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-style/#braces","title":"Braces","text":"<ul> <li>Use attached braces: The opening brace goes on the same line as the start of the statement. If the closing brace is followed by another keyword, it goes into the same line as well:</li> </ul> <pre><code> // Wrong\n if (codec)\n {\n }\n else\n {\n }\n\n // Correct\n if (codec) {\n } else {\n }\n</code></pre> <ul> <li>Exception: Function implementations and class declarations always have the left brace on the start of a line:</li> </ul> <pre><code> static void foo(int g)\n {\n     qDebug(\"foo: %i\", g);\n }\n\n class Moo\n {\n };\n</code></pre> <ul> <li>Use curly braces only when the body of a conditional statement contains more than one line:</li> </ul> <pre><code> // Wrong\n if (address.isEmpty()) {\n     return false;\n }\n\n for (int i = 0; i &lt; 10; +''i) {\n     qDebug(\"%i\", i);\n }\n\n // Correct\n if (address.isEmpty())\n     return false;\n\n for (int i = 0; i &lt; 10;i)\n     qDebug(\"%i\", i);\n</code></pre> <ul> <li>Exception 1: Use braces also if the parent statement covers several lines / wraps:</li> </ul> <pre><code> // Correct\n if (address.isEmpty() || !isValid()\n     || !codec) {\n     return false;\n }\n</code></pre> <ul> <li>Exception 2: Brace symmetry: Use braces also in if-then-else blocks where either the if-code or the else-code covers several lines:</li> </ul> <pre><code> // Wrong\n if (address.isEmpty())\n     qDebug(\"empty!\");\n else {\n     qDebug(\"%s\", qPrintable(address));\n     it;\n }\n\n // Correct\n if (address.isEmpty()) {\n     qDebug(\"empty!\");\n } else {\n     qDebug(\"%s\", qPrintable(address));\n     it;\n }\n\n // Wrong\n if (a)\n     \u2026\n else\n     if (b)\n         \u2026\n\n // Correct\n if (a) {\n     \u2026\n } else {\n     if (b)\n         \u2026\n }\n</code></pre> <ul> <li>Use curly braces when the body of a conditional statement is empty</li> </ul> <pre><code> // Wrong\n while (a);\n\n // Correct\n while (a) {}\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-style/#parentheses","title":"Parentheses","text":"<ul> <li>Use parentheses to group expressions:</li> </ul> <pre><code> // Wrong\n if (a &amp;&amp; b || c)\n\n // Correct\n if ((a &amp;&amp; b) || c)\n\n // Wrong\n a + b &amp; c\n\n // Correct\n (a + b) &amp; c\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-style/#switch-statements","title":"Switch statements","text":"<ul> <li>The case labels are in the same column as the switch</li> <li>Every case must have a break (or return) statement at the end or a comment to indicate that there's intentionally no break, unless another case follows immediately.</li> </ul> <pre><code> switch (myEnum) {\n case Value1:\n   doSomething();\n   break;\n case Value2:\n case Value3:\n   doSomethingElse();\n   // fall through\n default:\n   defaultHandling();\n   break;\n }\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-style/#jump-statements-break-continue-return-and-goto","title":"Jump statements (break, continue, return, and goto)","text":"<ul> <li>Do not put 'else' after jump statements:</li> </ul> <pre><code> // Wrong\n if (thisOrThat)\n     return;\n else\n     somethingElse();\n\n // Correct\n if (thisOrThat)\n     return;\n somethingElse();\n</code></pre> <ul> <li>Exception: If the code is inherently symmetrical, use of 'else' is allowed to visualize that symmetry</li> </ul>"},{"location":"contributing/coding-conventions/cpp-style/#line-breaks","title":"Line breaks","text":"<ul> <li>Keep lines shorter than 100 characters; wrap if necessary</li> <li>Comment/apidoc lines should be kept below 80 columns of actual text. Adjust to the surroundings, and try to flow the text in a way that avoids \"jagged\" paragraphs.</li> <li>Commas go at the end of wrapped lines; operators start at the beginning of the new lines. An operator at the end of the line is easy to miss if the editor is too narrow.</li> </ul> <pre><code> // Wrong\n if (longExpression +\n     otherLongExpression +\n     otherOtherLongExpression) {\n }\n\n // Correct\n if (longExpression\n     + otherLongExpression\n     + otherOtherLongExpression) {\n }\n</code></pre>"},{"location":"contributing/coding-conventions/cpp-style/#general-exception","title":"General exception","text":"<ul> <li>When strictly following a rule makes your code look bad, feel free to break it</li> </ul>"},{"location":"contributing/coding-conventions/cpp-style/#artistic-style","title":"Artistic Style","text":"<p>The following snippet can be used by artistic style for reformatting your code.</p> <pre><code>--style=kr \n--indent=spaces=4 \n--align-pointer=name \n--align-reference=name \n--convert-tabs \n--attach-namespaces\n--max-code-length=100 \n--max-instatement-indent=120 \n--pad-header\n--pad-oper\n</code></pre> <p>Note that \"unlimited\" <code>--max-instatement-indent</code> is used only because astyle is not smart enough to wrap the first argument if subsequent lines would need indentation limitation. You are encouraged to manually limit in-statement-indent to roughly 50 colums:</p> <pre><code>    int foo = some_really_long_function_name(and_another_one_to_drive_the_point_home(\n            first_argument, second_argument, third_arugment));\n</code></pre>"},{"location":"contributing/coding-conventions/design-philosophy/","title":"Design Philosophy","text":""},{"location":"contributing/coding-conventions/design-philosophy/#what-design-is-not","title":"What Design Is Not","text":"<p>Before getting into the details we need to clarify what design is about.</p> <ol> <li> <p>Design is not something you can add later. Design is an integral part of building something. It's not just colors and fonts, design is how things work. When you add a button to your application, that is design. You made a decision to add a button with a particular label, icon, location and size. The decisions you make are designs.</p> </li> <li> <p>Design is not an opinion Design is testable, therefore one design will meet a specific goal better than another one. Design is about solving a specific problem and so you can objectively compare the effectiveness of two designs at solving those problems.</p> </li> </ol>"},{"location":"contributing/coding-conventions/design-philosophy/#starting-with-the-fundamentals","title":"Starting with the fundamentals","text":"<p>Liri strives to provide a beautiful but unique and user friendly experience to the user. Before you begin designing your application, get fully acquainted with the environment.</p> <p>Understanding the interior of Liri will aid you in producing an application that integrates seamlessly with the desktop environment and is enjoyable to the user.</p> <p>Most individuals are not acquainted with the concepts or principles of human interface design, but they can easily identify which applications follow the guidelines and which applications stray from them.</p> <p>Become familiar with Liri and the fundamental principles contained within the human interface guidelines so that you can integrate them into your design to create the most user-friendly application possible.</p>"},{"location":"contributing/coding-conventions/qml-conventions/","title":"QML Coding Conventions","text":"<p>This document contains the QML coding conventions that all Liri projects follow.</p>"},{"location":"contributing/coding-conventions/qml-conventions/#qml-object-declarations","title":"QML Object Declarations","text":"<p>Throughout our code, documentation and examples, QML object attributes are always structured in the following order:</p> <ul> <li>id</li> <li>property declarations</li> <li>signal declarations</li> <li>JavaScript functions</li> <li>object properties</li> <li>child objects</li> <li>states</li> <li>transitions</li> </ul> <p>For better readability, we separate these different parts with an empty line.</p> <p>For example, a hypothetical photo QML object would look like this:</p> <pre><code>Rectangle {\n    id: photo                                               // id on the first line makes it easy to find an object\n\n    property bool thumbnail: false                          // property declarations\n    property alias image: photoImage.source\n\n    signal clicked()                                        // signal declarations\n\n    function doSomething(x)                                 // javascript functions\n    {\n        return x + photoImage.width;\n    }\n\n    color: \"gray\"                                           // object properties\n    x: 20; y: 20; height: 150                               // try to group related properties together\n    width: {                                                // large bindings\n        if (photoImage.width &gt; 200)\n            photoImage.width;\n        else\n            200;\n    }\n\n    Rectangle {                                             // child objects\n        id: border\n        anchors.centerIn: parent; color: \"white\"\n\n        Image { id: photoImage; anchors.centerIn: parent }\n    }\n\n    states: State {                                         // states\n        name: \"selected\"\n        PropertyChanges { target: border; color: \"red\" }\n    }\n\n    transitions: Transition {                               // transitions\n        from: \"\"; to: \"selected\"\n        ColorAnimation { target: border; duration: 200 }\n    }\n}\n</code></pre>"},{"location":"contributing/coding-conventions/qml-conventions/#grouped-properties","title":"Grouped Properties","text":"<p>If using multiple properties from a group of properties, consider using group notation instead of dot notation if it improves readability.</p> <p>For example, this:</p> <pre><code>Rectangle {\n    anchors.left: parent.left; anchors.top: parent.top; anchors.right: parent.right; anchors.leftMargin: 20\n}\n\nText {\n    text: \"hello\"\n    font.bold: true; font.italic: true; font.pixelSize: 20; font.capitalization: Font.AllUppercase\n}\n</code></pre> <p>could be written like this:</p> <pre><code>Rectangle {\n    anchors { left: parent.left; top: parent.top; right: parent.right; leftMargin: 20 }\n}\n\nText {\n    text: \"hello\"\n    font { bold: true; italic: true; pixelSize: 20; capitalization: Font.AllUppercase }\n}\n</code></pre>"},{"location":"contributing/coding-conventions/qml-conventions/#lists","title":"Lists","text":"<p>If a list contains only one element, we generally omit the square brackets.</p> <p>For example, it is very common for a component to only have one state.</p> <p>In this case, instead of:</p> <pre><code>states: [\n    State {\n        name: \"open\"\n        PropertyChanges { target: container; width: 200 }\n    }\n]\n</code></pre> <p>we will write this:</p> <pre><code>states: State {\n    name: \"open\"\n    PropertyChanges { target: container; width: 200 }\n}\n</code></pre>"},{"location":"contributing/coding-conventions/qml-conventions/#javascript-code","title":"JavaScript Code","text":"<p>If the script is a single expression, we recommend writing it inline:</p> <pre><code>Rectangle { color: \"blue\"; width: parent.width / 3 }\n</code></pre> <p>If the script is only a couple of lines long, we generally use a block:</p> <pre><code>Rectangle {\n    color: \"blue\"\n    width: {\n        var w = parent.width / 3;\n        console.debug(w);\n        return w;\n    }\n}\n</code></pre> <p>If the script is more than a couple of lines long or can be used by different objects, we recommend creating a function and calling it like this:</p> <pre><code>function calculateWidth(object)\n{\n    var w = object.width / 3;\n    // ...\n    // more javascript code\n    // ...\n    console.debug(w);\n    return w;\n}\n\nRectangle { color: \"blue\"; width: calculateWidth(parent) }\n</code></pre> <p>For long scripts, we will put the functions in their own JavaScript file and import it like this:</p> <pre><code>import \"myscript.js\" as Script\n\nRectangle { color: \"blue\"; width: Script.calculateWidth(parent) }\n</code></pre> <p>If the code is longer than one line and hence within a block, we use semicolons to indicate the end of each statement:</p> <pre><code>MouseArea {\n    anchors.fill: parent\n    onClicked: {\n        var scenePos = mapToItem(null, mouseX, mouseY);\n        console.log(\"MouseArea was clicked at scene pos \" + scenePos);\n    }\n}\n</code></pre> <p>This document is based on Qt's QML Coding Conventions which is (C) 2017 The Qt Company Ltd, licensed under the terms of the GNU Free Documentation License version 1.3 as published by the Free Software Foundation.</p>"},{"location":"contributing/contributor-guide/","title":"Contributor Guide","text":"<p>With Google's repo command you can download all the projects at once and open them from QtCreator.</p>"},{"location":"contributing/contributor-guide/#prerequisites","title":"Prerequisites","text":"<p>In this guide we assume that you are using the <code>bash</code> shell and QtCreator 4.3.0 or greater.</p>"},{"location":"contributing/contributor-guide/#download-sources-and-prepare-for-the-development","title":"Download sources and prepare for the development","text":""},{"location":"contributing/contributor-guide/#install-repo","title":"Install repo","text":"<p>Your Linux distribution might have <code>repo</code> available, check in their repositories.</p> <p>We know Arch Linux has got the package, if you are using it just:</p> <pre><code>sudo pacman -S repo\n</code></pre> <p>If you are using another distribution and it doesn't have a package available, follow these instructions:</p> <p>Create ~/bin/ subdirectory, include it in PATH, and then switch to it by executing the following commands:</p> <pre><code>mkdir ~/bin/\nPATH=~/bin:$PATH\n</code></pre> <p>Download the repo script by executing the following command:</p> <pre><code>curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo\n</code></pre> <p>Change the attribute of repo to make it executable by executing the command:</p> <pre><code>chmod a+x ~/bin/repo\n</code></pre>"},{"location":"contributing/contributor-guide/#clone-the-repositories","title":"Clone the repositories","text":"<p>To clone the latest source of all projects over SSH, perform the following procedure:</p> <p>Firstly, create a new directory for Liri. This will be referred to as repo root in the docs. Switch to it by executing the following commands:</p> <pre><code>mkdir -p ~/git/liri/lirios\ncd ~/git/liri/lirios\n</code></pre> <p>Initialize the repository by executing one of the following commands, as appropriate.</p> <p>For write access:</p> <pre><code>repo init -u ssh://git@github.com/lirios/lirios.git -b develop\n</code></pre> <p>For read-only access:</p> <pre><code>repo init -u https://github.com/lirios/lirios.git -b develop\n</code></pre> <p>Synchronize the repository by executing the following command:</p> <pre><code>repo sync\n</code></pre>"},{"location":"contributing/contributor-guide/#get-ready-for-development","title":"Get ready for development","text":"<p><code>repo</code> doesn't create local branches for you, hence you end up with a detached head that points to the last known good commit.</p> <p>Before you start developing make sure you have local branches:</p> <pre><code>repo forall -c 'git checkout $REPO_RREV; git submodule update --init --recursive'\n</code></pre> <p>Now set git to use the commit template that will help you write good commit messages:</p> <pre><code>ROOTDIR=$(pwd) repo forall -c 'git config commit.template $ROOTDIR/.commit-template'\n</code></pre>"},{"location":"contributing/contributor-guide/#setup-the-environment","title":"Setup the environment","text":"<p>The installation root is the directory where all files will be installed when building the Liri master project from QtCreator.</p> <p>To set your environment variables correctly so you will be able to launch the cross platform apps, run</p> <pre><code>source env-setup.sh [nvidia]\n</code></pre> <p>Note for users running the Nvidia proprietary drivers: Supply the <code>nvidia</code> argument every time you run the env-setup.sh script</p> <p>By default, <code>.build/install-root</code> inside your repo root will be used as installation root. To change this, issue the command with the LIRIDIR prefix instead</p> <pre><code>LIRIDIR=\"path/to/directory\" source env-setup.sh [nvidia]\n</code></pre>"},{"location":"contributing/contributor-guide/#open-the-project","title":"Open the project","text":"<p>Run <code>QtCreator</code> and open the master project file <code>CMakeLists.txt</code> inside your repo root.</p> <p></p> <p>Click on the \"Projects\" button and setup the build, this needs to be done only the first time.</p> <p></p> <p>Set the build directory to whatever you want, just make sure you have access to the directory:</p> <p></p> <p>Make sure the build steps are configured like in this screenshot:</p> <p></p> <p>Set <code>CMAKE_INSTALL_PREFIX</code> to change the installation root.</p> <p>Remember to replace <code>/home/plfiorini</code> to your actual home directory.</p> <p>If you don't want to run all the unit tests during the build set <code>BUILD_TESTING</code> to <code>OFF</code>.</p> <p>Now create a custom build step like this:</p> <p></p> <p>The custom build step will compile the settings schemas so it must be there.</p>"},{"location":"contributing/contributor-guide/#update-sources","title":"Update sources","text":"<p>New repositories might be added to the manifest or new commits are pushed to existing repositories, so from time to time you need to fetch updated versions.</p> <p>Make sure all your changes are either committed or stashed and run:</p> <pre><code>cd ~/git/liri/lirios\nrepo sync\n</code></pre> <p>Now set git to use the commit template that will help you write good commit messages:</p> <pre><code>ROOTDIR=$(pwd) repo forall -c 'git config commit.template $ROOTDIR/.commit-template'\n</code></pre>"},{"location":"modules/","title":"Overview","text":""},{"location":"modules/#modules","title":"Modules","text":"<p>All modules revolve around Fluid, a library that implements the Material Design guidelines with QtQuick.  You can learn more about here.</p> <p>To summarize the area of interest we have:</p> <ul> <li>Cross-platform apps</li> <li>Core apps</li> <li>Libraries</li> <li>Desktop environment</li> <li>Operating system</li> </ul>"},{"location":"modules/#cross-platform-apps","title":"Cross-platform apps","text":"<p>Cross-platform apps are designed to run on all operating systems such as Linux, macOS, Windows and mobile platforms like Android and iOS.</p> <p>The cross-platform apps are:</p> <ul> <li>Browser (Docs here)</li> <li>Calculator</li> <li>Text (Docs here)</li> </ul>"},{"location":"modules/#core-apps","title":"Core apps","text":"<p>Core apps are primarily designed with Linux in mind and, in some cases, might even be useful only on LiriOS.</p> <p>The core apps are:</p> <ul> <li>AppCenter</li> <li>Files</li> <li>Terminal</li> </ul>"},{"location":"modules/#libraries","title":"Libraries","text":"<p>We also develop the following libraries:</p> <ul> <li>Fluid</li> <li>QtAccountsService</li> <li>QtGSettings</li> <li>QtUDev</li> <li>CMakeShared</li> <li>LibLiri</li> </ul>"},{"location":"modules/#desktop-environment","title":"Desktop environment","text":"<p>The desktop environment is comprised of the following projects, all with the same release cycle.</p> <ul> <li>Shell</li> <li>Screen Cast</li> <li>Screenshot</li> <li>Settings</li> <li>eglfs</li> <li>Material Decoration</li> <li>QPA Theme</li> <li>PulseAudio Support</li> <li>NetworkManager Support</li> <li>Power Manager</li> <li>Portal Implementation</li> <li>XWayland Support</li> <li>Themes</li> </ul>"},{"location":"modules/#operating-system","title":"Operating system","text":"<ul> <li>Calamares Branding</li> </ul>"},{"location":"modules/browser/","title":"Browser","text":"<ul> <li>Shortcuts</li> </ul>"},{"location":"modules/browser/shortcuts/","title":"Shortcuts","text":"<p>Liri Browser is using Qt's magic to offer platform independent keyboard shortcuts. However, this is a list of shortcuts which should work on all platforms:</p> Action Shortcut New tab Ctrl+T Close tab Ctrl+W Focus tab Alt+[0...9] Back Alt+Left Forward Alt+Right Focus url Ctrl+L Refresh F5 Stop Esc"},{"location":"modules/text/","title":"Text","text":"<ul> <li>Syntax Highlighting</li> </ul>"},{"location":"modules/text/syntax-highlighting/","title":"Syntax Highlighting","text":"<p>This page describes Liri Text's syntax highlighting system. Please familiarize yourself with it's content before reporting bugs against syntax highlighting or making contributions to it's development.</p> <p>Liri Text implements GtkSourceView specification for language definitions with only exception: dupnames attribute is not currently supported.</p> <p>If you find any other difference in highlighting behavior of GtkSourceView/gedit and Liri Text, please report it as a bug.</p>"},{"location":"modules/text/syntax-highlighting/#manually-adding-language-definitions","title":"Manually adding language definitions","text":"<p>You can manually add languages to your local installation of Liri Text. To do so, put language definition into one of the following directories.</p>"},{"location":"modules/text/syntax-highlighting/#system-directory","title":"System directory","text":"<p><code>INSTALL_PREFIX/share/liri-text/language-specs/</code> on Linux, where INSTALL_PREFIX is defined during build time and usually equals to /usr for system packages or /usr/local for manual builds.</p> <p><code>BUNDLE_PATH/Resources/language-specs/</code> on macOS.</p> <p><code>APP_DIRECTORY\\language-specs\\</code> on Windows.</p>"},{"location":"modules/text/syntax-highlighting/#user-directory","title":"User directory","text":"<p><code>USER_DATA/Liri/Text/language-specs/</code> where USER_DATA is OS-dependant.</p>"},{"location":"modules/text/syntax-highlighting/#contributing-additional-languages-to-liri-text","title":"Contributing additional languages to Liri Text","text":"<p>We will gladly accept more languages into the base package. If you want to contribute one, please try to follow advices and conventions from GtkSourceView stated here.</p> <p>Once you have a language definition you're ready to send to us, add it to data/language-specs directory of this repository and open a pull request.</p>"},{"location":"modules/text/syntax-highlighting/#reporting-bugs","title":"Reporting bugs","text":"<p>If you find a misbehavior in Liri Text's syntax highlighting, please check if it differs from the one of gedit before opening an issue. All prebundled languages should behave identically, third-party languages too as long as they don't have <code>dupnames</code> attribute set for any context or regex.</p> <p>If the behavior is identical, but you think it's incorrect, you can still open an issue and we'll consider changing corresponding language definition.</p>"},{"location":"packaging/","title":"Overview","text":""},{"location":"packaging/#packaging","title":"Packaging","text":"<p>We aim to provide a sensible set of packages for our modules upstream.</p>"},{"location":"packaging/#cross-distribution-bundles","title":"Cross-distribution Bundles","text":"<p>Currently, we provide the following cross-distribution bundles:</p> <ul> <li>Flatpak</li> <li>Snap </li> <li>AppImage</li> </ul>"},{"location":"packaging/#distribution-packages","title":"Distribution Packages","text":"<p>Packages for:</p> <ul> <li>Arch Linux</li> </ul>"},{"location":"packaging/#windows-macos","title":"Windows &amp; macOS","text":"<p>We also aim to provide binaries of our cross-platform apps for Windows and macOS.</p>"},{"location":"packaging/snap/","title":"Snap","text":""},{"location":"packaging/snap/#snap","title":"Snap","text":"<p>Our snap packages are built with snapcraft.</p> <p>If you are new to snapcraft, we highly recommend you to check out their introduction to building snaps</p> <p>There are a few repositories containing sources and packaging data relevant for building our snap packages.</p>"},{"location":"packaging/snap/#platform-snap","title":"Platform snap","text":"<p>Our platform snap serves as a bundle for libraries commonly used by our projects. It contains Qt, KDE dependencies, Fluid and some other pieces.</p> <p>Right now it has to be build on Ubuntu 16.04 because this is the current base for snap applications.  Even if you are running Ubuntu 16.04 however, you should use <code>snapcraft cleanbuild</code> or create your own LXC container to build the platform snap in.</p> <p>By doing so, you make sure you don't pollute your system with libraries installed for the snap and you also make sure the snap will not be polluted by your system.</p> <p>Be warned that it will download and build a big chunk of its contents from source so the build might (depending on your machine) take several hours and will use multiple gigabytes of hard disk space.</p>"},{"location":"packaging/snap/#naming-and-versioning","title":"Naming and versioning","text":"<p>Projects depending on the platform snap connect to it using the content interface.  Unfortunately, the only way to handle compatibility breaks right now is to publish a new platform snap with a new name. Because of the way snap is designed, there is currently no way to have more than one version of a snap package installed. Therefore there is no way for a snap to pin a given version of another snap (like the platform snap) as that would require the ability to have mutliple versions installed.</p> <p>The platform snap naming roughly follows the Liri OS versioning and looks like the following:</p> <p>For a Liri OS version following semver <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>, the platform snap naming equals <code>liri-platform-&lt;major&gt;-&lt;minor&gt;[-&lt;release build&gt;]</code>. <code>&lt;release build&gt;</code> is an incremental number to handle incompatible changes between Liri OS releases.</p> <p>For example, consider the following scenario:</p> <p>Liri OS 1.0.0 gets released. <code>liri-platform-1-0</code> gets released.  An incompatible change in one of the included packages happens which would affect projects depending on the platform snap. As Liri OS 1.1.0 is not released yet, <code>liri-platform-1-0-1</code> is being created. Once Liri OS 1.1.0 is out, <code>liri-platform-1-1</code> will be created.</p>"},{"location":"packaging/snap/#snapcraft-parts","title":"Snapcraft parts","text":"<p>To deduplicate snapcraft configuration, there is a set of snapcraft parts available. They can be used in snap applications using the <code>after</code> keywoard, e.g. <code>after: [liri-platform-&lt;version&gt;]</code>, where <code>&lt;version&gt;</code> is the current platform snap version.</p> <p>Snapcraft parts contain a launcher to manage the connection with the platform snap and setup the runtime environment as well as other assets like a <code>qt.conf</code> and workarounds for upstream issues.</p> <p>See the readme in the GitHub repository for more information.</p>"},{"location":"packaging/snap/#snapcraft-plugins","title":"Snapcraft plugins","text":"<p>Snapcraft plugins are used to share a common set of custom snapcraft plugins that are used by the projects depending on the platform snap.</p> <p>The custom Qbs plugin for example sets up the build environment to make it possible to build packages against the platform snap package.</p>"},{"location":"packaging/snap/#snap-packages","title":"Snap packages","text":"<p>The snap packages repository is where development on the snap packages for our projects takes place. The packaging depends on the snapcraft plugins and parts mentioned above as well as the platform snap at build time.</p>"}]}